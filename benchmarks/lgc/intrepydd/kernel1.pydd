def func0_unopt(seeds: Array(int32, 1), degrees: Array(int32, 1), alpha: float64, epsilon: float64, num_nodes: int32, adj_indices: Array(int32, 1), adj_indptr: Array(int32, 1)) -> Array(float64, 2):
               
    num_seeds = seeds.shape(0)
    out = empty([num_seeds, num_nodes], float64())
    for i in range(num_seeds):
        seed = seeds[i]
        p = zeros(num_nodes, float64())
        r = zeros(num_nodes, float64())
        r[seed] = 1.0

        frontier = empty(1, int32())
        frontier[0] = seed
        while frontier.shape(0) > 0:

            r_prime = add(r, 0.0) # instead of r.copy()
            for node_idx in frontier:
                p[node_idx] = p[node_idx] + ((float64(2.0) * alpha) / (float64(1.0) + alpha)) * r[node_idx]
                r_prime[node_idx] = 0.0

            for src_idx in frontier:
                for j in range(adj_indptr[src_idx], adj_indptr[src_idx+1]):
                    dst_idx = adj_indices[j]
                    update = ((float64(1.0) - alpha) / (float64(1.0) + alpha)) * r[src_idx] / float64(degrees[src_idx])
                    r_prime[dst_idx] = r_prime[dst_idx] + update

            r: Array(float64, 1) = r_prime

            frontier = where(logical_and(ge(r, mul(degrees, epsilon)), gt(degrees, 0))) # expand & fuse

        for j in range(num_nodes):
            out[i,j] = p[j]

    return out.T

def func1_unopt(seeds: Array(int32, 1), d: Array(int32, 1), alpha: float64, rho: float64, iters: int32, adj_vals: Array(float64, 1), adj_cols: Array(int32, 1), adj_idxs: Array(int32, 1), nrows: int32, ncols: int32) -> Array(float64, 2):

    adj = csr_to_spm(adj_vals, adj_cols, adj_idxs, ncols)
    num_seeds = seeds.shape(0)
    out = empty([num_seeds, nrows], float64())
    for i in range(num_seeds):
        seed = seeds[i]

        # Make personalized distribution
        s: Array(float64, 1) = zeros(nrows, float64())
        s[seed] = 1.0

        # Compute degree vectors/matrices
        d_sqrt = d.sqrt()
        dn_sqrt: Array(float64, 1) = div(1.0, d_sqrt)

        D = spm_diags(d)
        Dn_sqrt = spm_diags(dn_sqrt)

        # Normalized adjacency matrix
        Q = spm_add(D, spm_add(D, adj).spm_mul(- (float64(1.0) - alpha) / float64(2.0)))
        Q = spmm(Dn_sqrt, Q).spmm(Dn_sqrt)

        # Initialize
        q: Array(float64, 1) = zeros(nrows, float64())

        rad: Array(float64, 1) = mul(d_sqrt, rho * alpha)
        grad0: Array(float64, 1) = mul(dn_sqrt, -alpha).mul(s)
        grad: Array(float64, 1)  = grad0

        # Run
        for _ in range(iters):
            q: Array(float64, 1) = maximum(sub(q, grad).sub(rad), 0.0)
            grad: Array(float64, 1) = add(grad0, spmv(Q, q))
            #spmv_out = empty(Q.shape(0), float64())
            #grad: Array(float64, 1) = add(grad0, _spmv(Q, q, spmv_out))
        
        # out.append(q * d_sqrt)
        # p = empty_like(q)
        # _mul(q, d_sqrt, p)
        
        # print("q", q.shape(0))
        # print("d_sqrt", d_sqrt.shape(0))

        p = mul(q, d_sqrt)
        for j in range(nrows):
            out[i,j] = p[j]

    return out.T
